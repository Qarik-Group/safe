#!/bin/bash
set -u

rc=0
platform=
arch=amd64

case $OSTYPE in
(darwin*)
	platform=darwin
	declare -a versions=(
		0.6.5
	)
	;;
(linux*)
	platform=linux
	declare -a versions=(
		0.5.0
		0.5.2
		0.6.4
		0.6.5
	)
	;;
(*)
	echo >&2 "UNRECOGNIZED OSTYPE '$OSTYPE'"
	exit 1
	;;
esac



bail() {
	echo >&2 $*
	exit 2
}
testing() {
	rm -f t/home/got t/home/want t/home/diff t/home/errors
	local v=$1 ; shift
	echo -n "[$v] $*... "
}
diffok() {
	if [[ -f t/home/errors && -s t/home/errors ]]; then
		echo "FAILED! (with errors:)"
		rc=1
		cat t/home/errors
		echo ; echo
	elif ! diff -u t/home/got t/home/want >t/home/diff 2>&1; then
		echo "FAILED!"
		rc=1
		cat t/home/diff
		echo ; echo
	else
		echo "ok"
	fi
}
yamlok() {
	[ -s t/home/got ] || echo "--- {}" > t/home/got
	spruce merge t/home/got  > t/home/got.x   ; mv t/home/got.x  t/home/got
	spruce merge t/home/want > t/home/want.x  ; mv t/home/want.x t/home/want
	diffok
}
exitok() {
	if [[ $1 -eq $2 ]]; then
		echo "ok"
	else
		echo "FAILED!"
		rc=1
		echo " expected process to exit $2"
		echo "   but it actually exited $1"
	fi
}

########################################################################

mkdir -p vaults t/tmp
trap 'rm -rf t/' INT QUIT TERM EXIT

for version in ${versions[@]}; do
	killall vault-${version} >/dev/null 2>&1 || true
done
for version in ${versions[@]}; do
	echo "VAULT ${version}"
	killall vault-${version} >/dev/null 2>&1 || true
	echo "----------------------------------------------"
	if [[ ! -f vaults/vault-${version} ]]; then
		echo "Downloading Vault ${version} CLI..."
		curl --fail -L > t/tmp/archive.zip \
			https://releases.hashicorp.com/vault/${version}/vault_${version}_${platform}_${arch}.zip \
			|| bail "download of vault ${version} failed"

		unzip -d t/tmp t/tmp/archive.zip
		mv t/tmp/vault vaults/vault-${version}
		echo "DONE"
		echo
	fi

	old_home=$HOME
	export HOME=${PWD}/t/home

	rm -rf t/home ; mkdir -p t/home
	#trap "rm -rf t/home" INT TERM QUIT EXIT

	./vaults/vault-${version} server -dev >t/home/log 2>&1 &
	vault_pid=$!
	waitfor=600
	while ! grep -iq '^root token: ' t/home/log; do
		if [[ $waitfor -gt 0 ]]; then
			waitfor=$((waitfor - 1))
			sleep 0.1
		else
			echo "FAILED - timed out waiting for vault server (-dev) to start"
			exit 3 # FIXME: this is the wrong thing to do
		fi
	done

	root_token=$(awk '/^Root Token:/ { print $3 }' < t/home/log | head -n1)
	unseal_key=$(awk '/^Unseal Key:/ { print $3 }' < t/home/log | head -n1)

	./safe target unit-tests http://127.0.0.1:8200
	./safe auth token <<<${root_token}

	testing $version basic set/get operation
	./safe set secret/handshake knock=knock >/dev/null
	./safe ask secret/handshake whos=there >/dev/null
	./safe get secret/handshake >t/home/got 2>t/home/errors
	cat >t/home/want <<EOF
--- # secret/handshake
knock: knock
whos: there
EOF
	yamlok

	testing $version basic check/exists operation
	./safe exists secret/handshake        ; exitok $? 0
	./safe exists secret/handshake:knock  ; exitok $? 0
	./safe exists secret/handshake:enoent ; exitok $? 1
	./safe exists secret/enoent           ; exitok $? 1
	./safe exists secret/enoent:sub       ; exitok $? 1

	testing $version multiple-attribute set operation
	./safe set secret/account username=admin password=sekrit >/dev/null
	./safe get secret/account >t/home/got 2>t/home/errors
	cat >t/home/want <<EOF
--- # secret/account
username: admin
password: sekrit
EOF
	yamlok

	testing $version password randomization
	./safe gen secret/random one     >/dev/null
	./safe gen secret/random another >/dev/null
	./safe get secret/random | spruce json >t/home/got 2>t/home/errors
	one=$(jq -r .one < t/home/got)
	another=$(jq -r .another < t/home/got)
	if [[ ${one} == ${another} ]]; then
		echo "FAILED"
		rc=1
		echo "  ... expected generated password '${one}'"
		echo "            to not be the same as '${another}'"
	else
		echo "ok"
	fi

	testing $version command chaining
	./safe gen secret/chained a -- gen secret/chained b -- gen secret/chained c >/dev/null
	./safe get secret/chained | spruce json > t/home/got 2>t/home/errors
	for k in a b c; do
		v=$(jq -r .$k < t/home/got)
		if [[ -z "$v" ]]; then
			echo "FAILED"
			rc=1
			echo "  ... expected secret/chained/$k to exist"
		else
			echo "ok"
		fi
	done


	testing $version custom password runes randomization

	./safe gen --policy "1-9" 64 secret/random one #    >/dev/null
	./safe get secret/random | spruce json >t/home/runed # 2>t/home/errors

	one=$(jq -r .one < t/home/runed)
	if [[ "$one" =~ ^[1-9]+$ ]]; then
		echo "ok"
	else
		echo "FAILED"
		rc=1
		echo "  expected generated password: '$one'"
		echo "              to only contain: [1-9]"
	fi

	testing $version single-value retrieval
	./safe set secret/single/value foo=bar baz=quux >/dev/null
	foo=$(./safe get secret/single/value:foo)
	if [[ ${foo} != "bar" ]]; then
		echo "FAILED"
		rc=1
		echo "  ... expected foo='bar'"
		echo "               got '${foo}'"
	else
		echo "ok"
	fi

	testing $version tree display
	./safe gen secret/tree/alpha     x >/dev/null
	./safe gen secret/tree/g         x >/dev/null
	./safe gen secret/tree/g/a       x >/dev/null
	./safe gen secret/tree/beta/name x >/dev/null
	./safe gen secret/tree/beta/env  x >/dev/null
	./safe gen secret/tree/g/a/m     x >/dev/null
	./safe gen secret/tree/g/a/m/m   x >/dev/null
	./safe gen secret/tree/g/a/m/m/a x >/dev/null
	./safe tree secret/tree >t/home/got 2>t/home/errors
	cat >t/home/want <<EOF
.
└── secret/tree
    ├── alpha
    ├── beta/
    │   ├── env
    │   └── name
    ├── g
    └── g/
        ├── a
        └── a/
            ├── m
            └── m/
                ├── m
                └── m/
                    └── a

EOF
	diffok
	./safe tree -d secret/tree >t/home/got 2>t/home/errors
	cat >t/home/want <<EOF
.
└── secret/tree
    ├── beta/
    └── g/
        └── a/
            └── m/
                └── m/

EOF
	diffok
	./safe tree -d secret/tree >t/home/got 2>t/home/errors
	cat >t/home/want <<EOF
.
└── secret/tree
    ├── beta/
    └── g/
        └── a/
            └── m/
                └── m/

EOF
	diffok

	case ${version} in
	(0.5.0|0.5.2) ;;
	(*)
		testing ${version} tree not found errors
		./safe tree secret/enoent >t/home/got 2>&1
		cat >t/home/want <<EOF
!! no secret exists at path \`secret/enoent\`
EOF
		diffok
		;;
	esac

	testing ${version} tree export
	./safe set secret/export/admin username=admin password=sekrit         >/dev/null
	./safe set secret/export/robot username=bot password=beep-boop mark=2 >/dev/null
	./safe set secret/export/a/b/c subkey='the value given'               >/dev/null
	./safe export secret/export >t/home/got 2>t/home/errors
	cat >t/home/want <<EOF
---
secret/export/admin:
  username: admin
  password: sekrit
secret/export/robot:
  username: bot
  password: beep-boop
  mark: "2"
secret/export/a/b/c:
  subkey: the value given
EOF
	yamlok

	testing ${version} tree import
	cat <<EOF | spruce json >t/home/want
---
secret/import/admin:
  username: admin
  password: sekrit
secret/import/robot:
  username: bot
  password: beep-boop
  mark: "2"
secret/import/a/b/c:
  subkey: the value given
EOF
	./safe import secret/import <t/home/want >/dev/null
	./safe export secret/import >t/home/got 2>t/home/errors
	yamlok

	testing ${version} x509 commands
	./safe x509 issue                                                ; exitok $? 1 # need a path
	./safe x509 issue --signed-by secret/enoent                      ; exitok $? 1 # still need a name...
	./safe x509 issue --signed-by secret/enoent secret/cert          ; exitok $? 1 # ca must exist

	./safe x509 issue secret/x509/self-signed --name www.example.com ; exitok $? 0
	./safe x509 validate secret/x509/self-signed                     ; exitok $? 0
	./safe exists secret/x509/self-signed:certificate                ; exitok $? 0
	./safe exists secret/x509/self-signed:key                        ; exitok $? 0
	./safe exists secret/x509/self-signed:combined                   ; exitok $? 0
	./safe exists secret/x509/self-signed:serial                     ; exitok $? 1  # not a CA
	./safe exists secret/x509/self-signed:crl                        ; exitok $? 1  # not a CA
	./safe x509 check secret/x509/self-signed                        ; exitok $? 0
	./safe x509 check secret/x509/self-signed --for www.example.com  ; exitok $? 0
	./safe x509 check secret/x509/self-signed --for mail.example.com ; exitok $? 1
	./safe x509 check secret/x509/self-signed --for test@example.com ; exitok $? 1
	./safe x509 check secret/x509/self-signed --for 10.40.5.6        ; exitok $? 1

	./safe x509 issue secret/fail-without-name                       ; exitok $? 1
	./safe exists secret/fail-without-name:certificate               ; exitok $? 1
	./safe exists secret/fail-without-name:key                       ; exitok $? 1
	./safe exists secret/fail-without-name:combined                  ; exitok $? 1
	./safe exists secret/fail-without-name:serial                    ; exitok $? 1
	./safe exists secret/fail-without-name:crl                       ; exitok $? 1

	./safe x509 issue secret/x509/ca --name ca.example.com --ca      ; exitok $? 0
	./safe exists secret/x509/ca:certificate                         ; exitok $? 0
	./safe exists secret/x509/ca:key                                 ; exitok $? 0
	./safe exists secret/x509/ca:combined                            ; exitok $? 0
	./safe exists secret/x509/ca:serial                              ; exitok $? 0 # is a CA
	./safe exists secret/x509/ca:crl                                 ; exitok $? 0 # is a CA
	./safe x509 validate secret/x509/ca --ca                         ; exitok $? 0
	./safe x509 validate secret/x509/ca --not-expired                ; exitok $? 0
	./safe x509 validate secret/x509/ca --for ca.example.com         ; exitok $? 0
	./safe x509 validate secret/x509/ca --for www.example.com        ; exitok $? 1
	./safe x509 validate secret/x509/ca --signed-by secret/x509/ca \
	                                    --not-revoked                ; exitok $? 0

	./safe x509 check                                                ; exitok $? 1 # need a path
	./safe x509 check --signed-by secret/enoent                      ; exitok $? 1 # still need a name...
	./safe x509 check --signed-by secret/enoent secret/cert          ; exitok $? 1 # ca must exist
	./safe x509 check --signed-by secret/x509/ca secret/enoent       ; exitok $? 1 # cert must exist

	./safe x509 issue secret/x509/signed --signed-by secret/x509/ca --name mail.example.com
	./safe x509 validate secret/x509/signed --signed-by secret/x509/ca \
	                                        --not-expired \
	                                        --not-revoked \
	                                        --for mail.example.com   ; exitok $? 0

	./safe x509 revoke                                               ; exitok $? 1 # need a path
	./safe x509 revoke --signed-by secret/x509/ca                    ; exitok $? 1 # still need a path...
	./safe x509 revoke --signed-by secret/x509/ca secret/enoent      ; exitok $? 1 # path must exist
	./safe x509 revoke --signed-by secret/enoent secret/x509/signed  ; exitok $? 1 # ca must exist

	./safe x509 crl --renew                                          ; exitok $? 1 # need a path
	./safe x509 crl secret/x509/ca                                   ; exitok $? 1 # need --renew
	./safe x509 crl --renew secret/enoent                            ; exitok $? 1 # path must exist
	./safe x509 crl --renew secret/x509/signed                       ; exitok $? 1 # need a ca
	./safe x509 crl --renew secret/x509/ca                           ; exitok $? 0

	./safe x509 revoke secret/x509/signed --signed-by secret/x509/ca ; exitok $? 0
	./safe x509 validate secret/x509/signed --signed-by secret/x509/ca \
	                                        --not-expired \
	                                        --revoked \
	                                        --for mail.example.com   ; exitok $? 0

	./safe x509 issue secret/x509/multi --signed-by secret/x509/ca \
	                                    --name dns.example.com \
	                                    --name *.dns.example.com \
	                                    --name 10.255.6.7 \
	                                    --name 10.255.6.8 \
	                                    --name admin@example.com \
	                                    --name safe.vault@example.com ; exitok $? 0
	./safe x509 check secret/x509/multi --signed-by secret/x509/ca \
	                                    --not-expired \
	                                    --not-revoked \
	                                    --for dns.example.com \
	                                    --for 10.255.6.7 \
	                                    --for 10.255.6.8 \
	                                    --for admin@example.com \
	                                    --for safe.vault@example.com ; exitok $? 0
	./safe x509 check secret/x509/multi --for whatever.dns.example.com \
	                                    --for anything.dns.example.com \
	                                    --for x.dns.example.com      ; exitok $? 0
	./safe x509 check secret/x509/multi --for x.y.dns.example.com    ; exitok $? 1
	./safe x509 check secret/x509/multi --for x.com                  ; exitok $? 1

	./safe x509 issue secret/x509/wild --signed-by secret/x509/ca \
	                                   --name cn.tld \
	                                   --name '*.tld' \
	                                   --name '*.*.tld' \
	                                   --name '*.*.*.tld'            ; exitok $? 0
	./safe x509 check secret/x509/wild --signed-by secret/x509/ca \
	                                   --for cn.tld \
	                                   --for x.tld \
	                                   --for x.y.tld \
	                                   --for x.y.z.tld               ; exitok $? 0
	./safe x509 check secret/x509/wild --signed-by secret/x509/ca \
	                                   --for tld                     ; exitok $? 1
	./safe x509 check secret/x509/wild --signed-by secret/x509/ca \
	                                   --for w.x.y.z.tld             ; exitok $? 1

	./safe x509 issue secret/x509/weak --bits 1024 -n weak.tld       ; exitok $? 0
	./safe x509 check secret/x509/weak --bits 1024                   ; exitok $? 0
	./safe x509 check secret/x509/weak --bits 2048                   ; exitok $? 1
	./safe x509 check secret/x509/weak --bits 4096                   ; exitok $? 1
	./safe x509 check secret/x509/weak --bits 1024 \
	                                   --bits 2048 \
	                                   --bits 4096                   ; exitok $? 0

	./safe x509 issue secret/x509/meh --bits 2048 -n meh.tld         ; exitok $? 0
	./safe x509 check secret/x509/meh --bits 1024                    ; exitok $? 1
	./safe x509 check secret/x509/meh --bits 2048                    ; exitok $? 0
	./safe x509 check secret/x509/meh --bits 4096                    ; exitok $? 1
	./safe x509 check secret/x509/meh --bits 1024 \
	                                  --bits 2048 \
	                                  --bits 4096                    ; exitok $? 0

	./safe x509 issue secret/x509/strong --bits 4096 -n strong.tld   ; exitok $? 0
	./safe x509 check secret/x509/strong --bits 1024                 ; exitok $? 1
	./safe x509 check secret/x509/strong --bits 2048                 ; exitok $? 1
	./safe x509 check secret/x509/strong --bits 4096                 ; exitok $? 0
	./safe x509 check secret/x509/strong --bits 1024 \
	                                     --bits 2048 \
	                                     --bits 4096                 ; exitok $? 0

	./safe x509 issue secret/x509/bad --bits 1000000000 -n one.mil   ; exitok $? 1

	./safe x509 check secret/x509/weak \
	                  secret/x509/meh \
	                  secret/x509/strong                             ; exitok $? 0

	./safe x509 check secret/x509/weak \
	                  secret/x509/ENOENT \
	                  secret/x509/strong                             ; exitok $? 1

	./safe x509 issue secret/x509/imposter --name x.y.z --ca         ; exitok $? 0
	./safe x509 check secret/x509/imposter --ca                      ; exitok $? 0
	./safe x509 issue secret/x509/imposter --name a.b.c              ; exitok $? 0 # not a CA, now
	./safe x509 check secret/x509/imposter --ca                      ; exitok $? 1 # not a CA

	export HOME=${old_home}
	kill $vault_pid
	echo
	echo

	if grep -q 'goroutine' t/home/log; then
		exit 77 # ./try will pick up on this error code
	fi

	if [[ ${rc} -ne 0 ]]; then
		echo >&2 "---[ VAULT LOG ]------------------------------------------"
		cat  >&2 t/home/log
		echo >&2 "----------------------------------------------------------"
	fi
done

if [[ ${rc} -eq 0 ]]; then
	echo PASSED
else
	echo FAILED
fi
exit ${rc}
